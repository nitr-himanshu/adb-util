name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create icon and metadata files
      run: |
        # Create version info for Windows executable
        echo 'VSVersionInfo(' > version_info.py
        echo '  ffi=FixedFileInfo(' >> version_info.py
        echo '    filevers=(1, 0, 0, 0),' >> version_info.py
        echo '    prodvers=(1, 0, 0, 0),' >> version_info.py
        echo '    mask=0x3f,' >> version_info.py
        echo '    flags=0x0,' >> version_info.py
        echo '    OS=0x4,' >> version_info.py
        echo '    fileType=0x1,' >> version_info.py
        echo '    subtype=0x0,' >> version_info.py
        echo '    date=(0, 0)' >> version_info.py
        echo '  ),' >> version_info.py
        echo '  kids=[' >> version_info.py
        echo '    StringFileInfo([' >> version_info.py
        echo '      StringTable(' >> version_info.py
        echo '        u"040904B0",' >> version_info.py
        echo '        [StringStruct(u"CompanyName", u"ADB-UTIL Project"),' >> version_info.py
        echo '         StringStruct(u"FileDescription", u"Android Debug Bridge Utility"),' >> version_info.py
        echo '         StringStruct(u"FileVersion", u"1.0.0.0"),' >> version_info.py
        echo '         StringStruct(u"InternalName", u"adb-util"),' >> version_info.py
        echo '         StringStruct(u"LegalCopyright", u"MIT License"),' >> version_info.py
        echo '         StringStruct(u"OriginalFilename", u"adb-util.exe"),' >> version_info.py
        echo '         StringStruct(u"ProductName", u"ADB-UTIL"),' >> version_info.py
        echo '         StringStruct(u"ProductVersion", u"1.0.0.0")])' >> version_info.py
        echo '    ]),' >> version_info.py
        echo '    VarFileInfo([VarStruct(u"Translation", [1033, 1200])])' >> version_info.py
        echo '  ]' >> version_info.py
        echo ')' >> version_info.py
    
    - name: Build Windows executable
      run: |
        pyinstaller ^
          --onefile ^
          --name adb-util ^
          --paths src ^
          --add-data "src;src" ^
          --hidden-import PyQt6 ^
          --hidden-import PyQt6.QtCore ^
          --hidden-import PyQt6.QtGui ^
          --hidden-import PyQt6.QtWidgets ^
          --hidden-import qasync ^
          --hidden-import aiofiles ^
          --hidden-import psutil ^
          --hidden-import watchdog ^
          --collect-all PyQt6 ^
          --version-file version_info.py ^
          --exclude-module matplotlib ^
          --exclude-module numpy ^
          --exclude-module pandas ^
          --exclude-module PIL ^
          --exclude-module tkinter ^
          --uac-admin ^
          --noconsole ^
          main.py
    
    - name: Sign Windows executable (optional)
      continue-on-error: true
      run: |
        # This would require a code signing certificate
        # For now, we'll just create a checksum
        certutil -hashfile dist\adb-util.exe SHA256 > dist\adb-util.exe.sha256
    
    - name: Create Windows archive
      run: |
        mkdir release-windows
        copy dist\adb-util.exe release-windows\
        copy dist\adb-util.exe.sha256 release-windows\
        copy README.md release-windows\
        copy LICENSE release-windows\
        echo "ADB-UTIL for Windows" > release-windows\README.txt
        echo "Run adb-util.exe to start the application" >> release-windows\README.txt
        7z a -tzip adb-util-windows.zip release-windows\*
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: adb-util-windows
        path: adb-util-windows.zip

  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-dev \
          python3-pip \
          python3-venv \
          build-essential \
          qt6-base-dev \
          qt6-tools-dev \
          qt6-tools-dev-tools \
          libgl1-mesa-dev \
          libglib2.0-dev \
          libfontconfig1-dev \
          libdbus-1-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libxcb-xinerama0-dev \
          libxcb-cursor0 \
          android-tools-adb
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux executable
      run: |
        pyinstaller \
          --onefile \
          --name adb-util \
          --paths src \
          --add-data "src:src" \
          --hidden-import PyQt6 \
          --hidden-import PyQt6.QtCore \
          --hidden-import PyQt6.QtGui \
          --hidden-import PyQt6.QtWidgets \
          --hidden-import qasync \
          --hidden-import aiofiles \
          --hidden-import psutil \
          --hidden-import watchdog \
          --collect-all PyQt6 \
          --exclude-module matplotlib \
          --exclude-module numpy \
          --exclude-module pandas \
          --exclude-module PIL \
          --exclude-module tkinter \
          main.py
    
    - name: Make executable and create checksum
      run: |
        chmod +x dist/adb-util
        sha256sum dist/adb-util > dist/adb-util.sha256
    
    - name: Create Linux archive
      run: |
        mkdir release-linux
        cp dist/adb-util release-linux/
        cp dist/adb-util.sha256 release-linux/
        cp README.md release-linux/
        cp LICENSE release-linux/
        echo "ADB-UTIL for Linux (Ubuntu 22.04+)" > release-linux/README.txt
        echo "Make sure you have Qt6 installed:" >> release-linux/README.txt
        echo "sudo apt-get install qt6-base-dev android-tools-adb" >> release-linux/README.txt
        echo "Run ./adb-util to start the application" >> release-linux/README.txt
        tar -czf adb-util-linux.tar.gz -C release-linux .
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: adb-util-linux
        path: adb-util-linux.tar.gz

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: adb-util-windows
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: adb-util-linux
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          adb-util-windows.zip
          adb-util-linux.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## ADB-UTIL Release
          
          ### Downloads
          - **Windows**: Download `adb-util-windows.zip`
          - **Linux (Ubuntu 22.04+)**: Download `adb-util-linux.tar.gz`
          
          ### Installation
          
          #### Windows
          1. Download and extract `adb-util-windows.zip`
          2. Run `adb-util.exe`
          
          #### Linux
          1. Download and extract `adb-util-linux.tar.gz`
          2. Install dependencies: `sudo apt-get install qt6-base-dev android-tools-adb`
          3. Run `./adb-util`
          
          ### Checksums
          SHA256 checksums are included in each archive for verification.
        token: ${{ secrets.GITHUB_TOKEN }}
