name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qt6-base-dev \
          qt6-tools-dev \
          qt6-tools-dev-tools \
          libgl1-mesa-glx \
          libegl1-mesa \
          libxrandr2 \
          libxss1 \
          libxcursor1 \
          libxcomposite1 \
          libasound2 \
          libxi6 \
          libxtst6 \
          xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Run linting
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy src --ignore-missing-imports --no-strict-optional

    - name: Run unit tests
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "not (gui or adb)" --maxfail=5

    - name: Run integration tests (non-GUI)
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
      run: |
        pytest tests/ -v -m "integration and not (gui or adb)" --maxfail=3
      continue-on-error: true

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate coverage report
      run: |
        coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

  build-check:
    runs-on: windows-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Test build
      run: |
        pyinstaller --onefile --windowed main.py --name adb-util-test
      
    - name: Test executable
      run: |
        ./dist/adb-util-test.exe --version
      continue-on-error: true
